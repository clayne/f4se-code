#pragma once
#include "RE/Bethesda/BSCore/BSTHashMap.h"
#include "RE/Bethesda/BSCore/BSSimpleList.h"
#include "RE/NetImmerse/NiMain/NiColor.h"
#include "RE/NetImmerse/NiMain/NiPoint2.h"
#include "RE/NetImmerse/NiMain/NiPoint3.h"
#include "RE/NetImmerse/NiMain/NiPoint4.h"
#include "RE/NetImmerse/NiMain/NiRect.h"

#include <DirectXMath.h>
#include <d3d11.h>

namespace RE
{
	namespace BSGraphics
	{
		enum Format : std::int32_t  //Line 57
		{
			FORMAT_NONE = 0x0,
			FORMAT_R32G32B32A32_TYPELESS = 0x1,
			FORMAT_R32G32B32A32_FLOAT = 0x2,
			FORMAT_R32G32B32A32_UINT = 0x3,
			FORMAT_R32G32B32A32_SINT = 0x4,
			FORMAT_R32G32B32_TYPELESS = 0x5,
			FORMAT_R32G32B32_FLOAT = 0x6,
			FORMAT_R32G32B32_UINT = 0x7,
			FORMAT_R32G32B32_SINT = 0x8,
			FORMAT_R16G16B16A16_TYPELESS = 0x9,
			FORMAT_R16G16B16A16_FLOAT = 0xA,
			FORMAT_R16G16B16A16_UNORM = 0xB,
			FORMAT_R16G16B16A16_UINT = 0xC,
			FORMAT_R16G16B16A16_SNORM = 0xD,
			FORMAT_R16G16B16A16_SINT = 0xE,
			FORMAT_R32G32_TYPELESS = 0xF,
			FORMAT_R32G32_FLOAT = 0x10,
			FORMAT_R32G32_UINT = 0x11,
			FORMAT_R32G32_SINT = 0x12,
			FORMAT_R32G8X24_TYPELESS = 0x13,
			FORMAT_D32_FLOAT_S8X24_UINT = 0x14,
			FORMAT_R32_FLOAT_X8X24_TYPELESS = 0x15,
			FORMAT_X32_TYPELESS_G8X24_UINT = 0x16,
			FORMAT_R10G10B10A2_TYPELESS = 0x17,
			FORMAT_R10G10B10A2_UNORM = 0x18,
			FORMAT_R10G10B10A2_UINT = 0x19,
			FORMAT_R11G11B10_FLOAT = 0x1A,
			FORMAT_R8G8B8A8_TYPELESS = 0x1B,
			FORMAT_R8G8B8A8_UNORM = 0x1C,
			FORMAT_R8G8B8A8_UNORM_SRGB = 0x1D,
			FORMAT_R8G8B8A8_UINT = 0x1E,
			FORMAT_R8G8B8A8_SNORM = 0x1F,
			FORMAT_R8G8B8A8_SINT = 0x20,
			FORMAT_R16G16_TYPELESS = 0x21,
			FORMAT_R16G16_FLOAT = 0x22,
			FORMAT_R16G16_UNORM = 0x23,
			FORMAT_R16G16_UINT = 0x24,
			FORMAT_R16G16_SNORM = 0x25,
			FORMAT_R16G16_SINT = 0x26,
			FORMAT_R32_TYPELESS = 0x27,
			FORMAT_D32_FLOAT = 0x28,
			FORMAT_R32_FLOAT = 0x29,
			FORMAT_R32_UINT = 0x2A,
			FORMAT_R32_SINT = 0x2B,
			FORMAT_R24G8_TYPELESS = 0x2C,
			FORMAT_D24_UNORM_S8_UINT = 0x2D,
			FORMAT_R24_UNORM_X8_TYPELESS = 0x2E,
			FORMAT_X24_TYPELESS_G8_UINT = 0x2F,
			FORMAT_R8G8_TYPELESS = 0x30,
			FORMAT_R8G8_UNORM = 0x31,
			FORMAT_R8G8_UINT = 0x32,
			FORMAT_R8G8_SNORM = 0x33,
			FORMAT_R8G8_SINT = 0x34,
			FORMAT_R16_TYPELESS = 0x35,
			FORMAT_R16_FLOAT = 0x36,
			FORMAT_D16_UNORM = 0x37,
			FORMAT_R16_UNORM = 0x38,
			FORMAT_R16_UINT = 0x39,
			FORMAT_R16_SNORM = 0x3A,
			FORMAT_R16_SINT = 0x3B,
			FORMAT_R8_TYPELESS = 0x3C,
			FORMAT_R8_UNORM = 0x3D,
			FORMAT_R8_UINT = 0x3E,
			FORMAT_R8_SNORM = 0x3F,
			FORMAT_R8_SINT = 0x40,
			FORMAT_A8_UNORM = 0x41,
			FORMAT_R1_UNORM = 0x42,
			FORMAT_R9G9B9E5_SHAREDEXP = 0x43,
			FORMAT_R8G8_B8G8_UNORM = 0x44,
			FORMAT_G8R8_G8B8_UNORM = 0x45,
			FORMAT_BC1_TYPELESS = 0x46,
			FORMAT_BC1_UNORM = 0x47,
			FORMAT_BC1_UNORM_SRGB = 0x48,
			FORMAT_BC2_TYPELESS = 0x49,
			FORMAT_BC2_UNORM = 0x4A,
			FORMAT_BC2_UNORM_SRGB = 0x4B,
			FORMAT_BC3_TYPELESS = 0x4C,
			FORMAT_BC3_UNORM = 0x4D,
			FORMAT_BC3_UNORM_SRGB = 0x4E,
			FORMAT_BC4_TYPELESS = 0x4F,
			FORMAT_BC4_UNORM = 0x50,
			FORMAT_BC4_SNORM = 0x51,
			FORMAT_BC5_TYPELESS = 0x52,
			FORMAT_BC5_UNORM = 0x53,
			FORMAT_BC5_SNORM = 0x54,
			FORMAT_B5G6R5_UNORM = 0x55,
			FORMAT_B5G5R5A1_UNORM = 0x56,
			FORMAT_B8G8R8A8_UNORM = 0x57,
			FORMAT_B8G8R8X8_UNORM = 0x58,
			FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 0x59,
			FORMAT_B8G8R8A8_TYPELESS = 0x5A,
			FORMAT_B8G8R8A8_UNORM_SRGB = 0x5B,
			FORMAT_B8G8R8X8_TYPELESS = 0x5C,
			FORMAT_B8G8R8X8_UNORM_SRGB = 0x5D,
			FORMAT_BC6H_TYPELESS = 0x5E,
			FORMAT_BC6H_UF16 = 0x5F,
			FORMAT_BC6H_SF16 = 0x60,
			FORMAT_BC7_TYPELESS = 0x61,
			FORMAT_BC7_UNORM = 0x62,
			FORMAT_BC7_UNORM_SRGB = 0x63,

			FORMAT_COUNT = 0x64,
		};

		enum class SetRenderTargetMode : std::uint32_t  //Line 187
		{
			SRTM_CLEAR,
			SRTM_CLEAR_DEPTH,
			SRTM_CLEAR_STENCIL,
			SRTM_NO_CLEAR,
			SRTM_RESTORE,
			SRTM_FORCE_COPY_RESTORE,
			SRTM_INIT,
		};

		enum VertexDescEntry  //Line 206
		{
			VERTEX_DESC_ENTRY_POSITION = 0x0,
			VERTEX_DESC_ENTRY_TEXCOORD0 = 0x1,
			VERTEX_DESC_ENTRY_TEXCOORD1 = 0x2,
			VERTEX_DESC_ENTRY_NORMAL = 0x3,
			VERTEX_DESC_ENTRY_BINORMAL = 0x4,
			VERTEX_DESC_ENTRY_COLOR = 0x5,
			VERTEX_DESC_ENTRY_SKINNING_DATA = 0x6,
			VERTEX_DESC_ENTRY_LANDSCAPE_DATA = 0x7,
			VERTEX_DESC_ENTRY_EYE_DATA = 0x8,
			VERTEX_DESC_ENTRY_INSTANCE = 0x9,

			VERTEX_DESC_ENTRY_COUNT = 0xA,
		};

		enum InstanceDescEntry : std::int32_t  //Line 221
		{
			INSTANCE_DESC_ENTRY_1 = 0x0,
			INSTANCE_DESC_ENTRY_2 = 0x1,
			INSTANCE_DESC_ENTRY_3 = 0x2,
			INSTANCE_DESC_ENTRY_4 = 0x3,
			INSTANCE_DESC_ENTRY_COUNT = 0x4,
		};

		enum ClearDepthStencilTarget : std::int32_t  //Line 230
		{
			CLEAR_DEPTH_STENCIL_TARGET_DEPTH = 0x1,
			CLEAR_DEPTH_STENCIL_TARGET_STENCIL = 0x2,
			CLEAR_DEPTH_STENCIL_TARGET_ALL = 0x3,
		};

		enum class TextureAddressMode  //Line 237
		{
			TEXTURE_ADDRESS_MODE_CLAMP_S_CLAMP_T,
			TEXTURE_ADDRESS_MODE_CLAMP_S_WRAP_T,
			TEXTURE_ADDRESS_MODE_WRAP_S_CLAMP_T,
			TEXTURE_ADDRESS_MODE_WRAP_S_WRAP_T,

			TEXTURE_ADDRESS_MODE_COUNT,
		};

		enum TextureFilterMode : std::uint32_t  //Line 248
		{
			TEXTURE_FILTER_MODE_NEAREST,
			TEXTURE_FILTER_MODE_BILERP,
			TEXTURE_FILTER_MODE_TRILERP,
			TEXTURE_FILTER_MODE_ANISO = 3,
			TEXTURE_FILTER_MODE_DEFAULT = 3,
			TEXTURE_FILTER_MODE_COMP_BILERP,

			TEXTURE_FILTER_MODE_COUNT,
		};

		enum AlphaBlendMode : std::int32_t  //Line 275
		{
			ALPHA_BLEND_MODE_DISABLED = 0x0,
			ALPHA_BLEND_MODE_DEFAULT = 0x0,
			ALPHA_BLEND_MODE_SRCALPHA_INVSRCALPHA = 0x1,
			ALPHA_BLEND_MODE_SRCALPHA_ONE = 0x2,
			ALPHA_BLEND_MODE_DEST_ZERO = 0x3,
			ALPHA_BLEND_MODE_ONE_INVSRCALPHA = 0x4,
			ALPHA_BLEND_MODE_ONE_ONE = 0x5,
			ALPHA_BLEND_MODE_WEAPON_BLOOD = 0x6,

			ALPHA_BLEND_MODE_COUNT = 0x7,
		};

		enum AlphaBlendAlphaToCoverage : std::int32_t  //Line 289
		{
			ALPHA_BLEND_ALPHA_TO_COVERAGE_DISABLED = 0x0,
			ALPHA_BLEND_ALPHA_TO_COVERAGE_ENABLED = 0x1,
			ALPHA_BLEND_ALPHA_TO_COVERAGE_COUNT = 0x2,
			ALPHA_BLEND_ALPHA_TO_COVERAGE_DEFAULT = 0x0,
		};

		enum AlphaBlendWriteMode : std::int32_t  //Line 298
		{
			ALPHA_BLEND_WRITE_MODE_DISABLED = 0x0,
			ALPHA_BLEND_WRITE_MODE_DEFAULT = 0x1,
			ALPHA_BLEND_WRITE_MODE_RGB = 0x1,
			ALPHA_BLEND_WRITE_MODE_RGBA = 0x2,
			ALPHA_BLEND_WRITE_MODE_RG = 0x3,
			ALPHA_BLEND_WRITE_MODE_BA = 0x4,
			ALPHA_BLEND_WRITE_MODE_R = 0x5,
			ALPHA_BLEND_WRITE_MODE_G = 0x6,
			ALPHA_BLEND_WRITE_MODE_B = 0x7,
			ALPHA_BLEND_WRITE_MODE_A = 0x8,
			ALPHA_BLEND_WRITE_MODE_A_TARGET0 = 0x9,
			ALPHA_BLEND_WRITE_MODE_A_TARGET1 = 0xA,
			ALPHA_BLEND_WRITE_MODE_A_TARGET2 = 0xB,
			ALPHA_BLEND_WRITE_MODE_A_TARGET3 = 0xC,

			ALPHA_BLEND_WRITE_MODE_COUNT
		};

		enum DepthStencilDepthMode : std::int32_t  //Line 320
		{
			DEPTH_STENCIL_DEPTH_MODE_DISABLED = 0x0,
			DEPTH_STENCIL_DEPTH_MODE_DEFAULT = 0x3,
			DEPTH_STENCIL_DEPTH_MODE_TEST = 0x1,
			DEPTH_STENCIL_DEPTH_MODE_WRITE = 0x2,
			DEPTH_STENCIL_DEPTH_MODE_TEST_WRITE = 0x3,
			DEPTH_STENCIL_DEPTH_MODE_TESTEQUAL = 0x4,
			DEPTH_STENCIL_DEPTH_MODE_TESTGREATEREQUAL = 0x5,
			DEPTH_STENCIL_DEPTH_MODE_TESTGREATER = 0x6,

			DEPTH_STENCIL_DEPTH_MODE_COUNT,
		};

		enum DepthStencilStencilMode : std::int32_t  //Line 334
		{
			DEPTH_STENCIL_STENCIL_MODE_DISABLED = 0x0,
			DEPTH_STENCIL_STENCIL_MODE_DEFAULT = 0x0,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE = 0x1,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM00000001 = 0x2,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM00000010 = 0x3,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM00000100 = 0x4,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM00001000 = 0x5,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM00010000 = 0x6,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM00100000 = 0x7,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM01000000 = 0x8,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_REPLACE_WM10000000 = 0x9,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_ALWAYS_INCREMENT = 0xA,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_GREATER_KEEP = 0xB,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP = 0xC,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM00000001 = 0xD,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM00000010 = 0xE,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM00000100 = 0xF,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM00001000 = 0x10,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM00010000 = 0x11,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM00100000 = 0x12,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM01000000 = 0x13,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_KEEP_RM10000000 = 0x14,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE = 0x15,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM00000010 = 0x16,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM00000100 = 0x17,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM00001000 = 0x18,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM00010000 = 0x19,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM00100000 = 0x1A,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM01000000 = 0x1B,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_RM10000000 = 0x1C,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_NOT_EQUAL_REPLACE_RM00000001 = 0x1D,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT = 0x1E,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM00000010 = 0x1F,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM00000100 = 0x20,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM00001000 = 0x21,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM00010000 = 0x22,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM00100000 = 0x23,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM01000000 = 0x24,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_INCREMENT_RM10000000 = 0x25,
			DEPTH_STENCIL_STENCIL_MODE_ENABLED_EQUAL_REPLACE_WM00000000 = 0x26,

			DEPTH_STENCIL_STENCIL_MODE_COUNT
		};

		enum RasterStateFillMode : std::int32_t  //Line 400
		{
			RASTER_STATE_FILL_MODE_SOLID = 0x0,
			RASTER_STATE_FILL_MODE_WIREFRAME = 0x1,
			RASTER_STATE_FILL_MODE_COUNT = 0x2,
			RASTER_STATE_FILL_MODE_DEFAULT = 0x0,
		};

		enum RasterStateCullMode : std::int32_t  //Line 409
		{
			RASTER_STATE_CULL_MODE_NONE = 0x0,
			RASTER_STATE_CULL_MODE_DEFAULT = 0x1,
			RASTER_STATE_CULL_MODE_BACK = 0x1,
			RASTER_STATE_CULL_MODE_FRONT = 0x2,
			RASTER_STATE_CULL_MODE_COUNT = 0x3,
		};

		enum RasterStateDepthBiasMode : std::int32_t  //Line 419
		{
			RASTER_STATE_DEPTHBIAS_MODE_NONE = 0x0,
			RASTER_STATE_DEPTHBIAS_MODE_ONE = 0x1,
			RASTER_STATE_DEPTHBIAS_MODE_TWO = 0x2,
			RASTER_STATE_DEPTHBIAS_MODE_THREE = 0x3,
			RASTER_STATE_DEPTHBIAS_MODE_AURORA = 0x4,
			RASTER_STATE_DEPTHBIAS_MODE_MOON_AND_STARS = 0x5,
			RASTER_STATE_DEPTHBIAS_MODE_WIREFRAME_BASE = 0x6,
			RASTER_STATE_DEPTHBIAS_MODE_WIREFRAME_DECAL = 0x7,
			RASTER_STATE_DEPTHBIAS_MODE_SHADOWMAP = 0x8,
			RASTER_STATE_DEPTHBIAS_MODE_COUNT = 0x9,
			RASTER_STATE_DEPTHBIAS_MODE_DEFAULT = 0x0,
		};

		enum RasterStateScissorMode : std::int32_t  //Line 435
		{
			RASTER_STATE_SCISSOR_MODE_DISABLED = 0x0,
			RASTER_STATE_SCISSOR_MODE_DEFAULT = 0x0,
			RASTER_STATE_SCISSOR_MODE_ENABLED = 0x1,

			RASTER_STATE_SCISSOR_MODE_COUNT = 0x2,
		};

		enum RasterStatePolygonStippleMode : std::int32_t  //Line 444
		{
			RASTER_STATE_POLYGON_STIPPLE_MODE_DISABLED = 0x0,
			RASTER_STATE_POLYGON_STIPPLE_MODE_ENABLED = 0x1,
			RASTER_STATE_POLYGON_STIPPLE_MODE_COUNT = 0x2,
			RASTER_STATE_POLYGON_STIPPLE_MODE_DEFAULT = 0x0,
		};

		enum class Usage  //Line 469
		{
			USAGE_DEFAULT,
			USAGE_IMMUTABLE,
			USAGE_DYNAMIC,
			USAGE_STAGING,
		};

		enum ComputeMode : std::int32_t  //Line 501
		{
			COMPUTE_MODE_RENDER = 0x0,
			COMPUTE_MODE_TOTAL = 0x1,
			COMPUTE_MODE_OFF = 0x1,
		};

		enum ComputeContextId  //Line 513
		{
			COMPUTE_CONTEXT_LOWP = 0x0,
			COMPUTE_CONTEXT_HIGHP = 0x1,
			COMPUTE_CONTEXT_COUNT = 0x2,
		};

		struct ApplicationWindowProperties  //Line 531
		{
		public:
			//members
			std::uint32_t uiWidth;
			std::uint32_t uiHeight;
			std::int32_t iX;
			std::int32_t iY;
			std::uint32_t uiRefreshRate;
			bool bFullScreen;
			bool bBorderlessWindow;
			bool bVSync;
			std::uint32_t uiPresentInterval;
		};

		struct RenderTargetProperties  //Line 544
		{
		public:
			//members
			std::uint32_t uiWidth;
			std::uint32_t uiHeight;
			Format eFormat;
			std::uint32_t uiMultiSample;
			bool bCopyable;
			bool bSupportUnorderedAccess;
			bool bAllowMipGeneration;
			bool bForceLinear;
			std::int32_t iMipLevel;
			std::uint32_t uiTextureTarget;
			bool bEnableFastClear;
		};
		static_assert(sizeof(RenderTargetProperties) == 0x20);  //28

		struct DepthStencilTargetProperties  //Line 589
		{
		public:
			//members
			std::uint32_t uiWidth;
			std::uint32_t uiHeight;
			std::uint32_t uiArraySize;
			std::uint32_t uiMultiSample;
			std::int32_t iAlias;
			bool bSampleable;
			bool bHTILE;
			bool Stencil;
			bool Use16BitsDepth;
		};
		static_assert(sizeof(DepthStencilTargetProperties) == 0x18);

		struct CubeMapRenderTargetProperties  //Line 628
		{
		public:
			//members
			std::uint32_t uiWidth;
			std::uint32_t uiHeight;
			BSGraphics::Format eFormat;
			std::uint32_t uiMultiSample;
			bool bSampleable;
			std::int32_t iAlias;
			std::int32_t i360Alias;
			std::int32_t i360Group;
			std::int32_t i360TileHeight;
		};
		static_assert(sizeof(CubeMapRenderTargetProperties) == 0x24);

		struct ShaderMacro  //Line 660
		{
		public:
			//members
			const char* Name;
			const char* Definition;
		};

		struct TextureInfo  //Line 672
		{
		public:
		};

		struct TextureStreamData  //Line 703
		{
		public:
			//members
		};

		enum RenderStatsGroup : std::int32_t  //Line 721
		{
			RENDER_STATS_GROUP_WATER_UPDATE = 0x0,
			RENDER_STATS_GROUP_UPDATE_OFFSCREEN_BUFFERS = 0x1,
			RENDER_STATS_GROUP_DEFERRED_PREPASS = 0x2,
			RENDER_STATS_GROUP_DEFERRED_DECALS = 0x3,
			RENDER_STATS_GROUP_DEFERRED_LIGHTS = 0x4,
			RENDER_STATS_GROUP_DEFERRED_COMPOSITE = 0x5,
			RENDER_STATS_GROUP_FORWARD = 0x6,
			RENDER_STATS_GROUP_REFRACTION = 0x7,
			RENDER_STATS_GROUP_IGNORE = 0x8,
			RENDER_STATS_GROUP_TOTAL = 0x9,
			RENDER_STATS_GROUP_COUNT = 0xA,
		};

		struct RenderStatsEntry  //Line 736
		{
		public:
			//members
		};

		struct ViewData  //Line 746
		{
		public:
			//members
			NiRect<float> kViewPort;
			NiPoint2 kViewDepthRange;
			__m128 kViewUp;
			__m128 kViewRight;
			__m128 kViewDir;
			DirectX::XMMATRIX kViewMat;
			DirectX::XMMATRIX kProjMat;
			DirectX::XMMATRIX kViewProjMat;
			DirectX::XMMATRIX kViewProjUnjittered;
			DirectX::XMMATRIX kCurrentViewProjUnjittered;
			DirectX::XMMATRIX kPreviousViewProjUnjittered;
			DirectX::XMMATRIX kInv1stPersonProjMat;
		};
	};
}
